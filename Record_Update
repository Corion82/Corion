import os

def main():
    
    ID_List = []                                                       # This is a memoization list. It will remember all the ID numbers we used for filenames.
    
    for file in os.listdir("C:/Code"):
        if ".rtf" not in file:
            continue
        infile = open(file, 'r')
        last, first, date, time = parseFile(infile)
        infile.close()
        if (last == None or first == None or date == None or time == None):
            if (last == None):
                print(file + " had no last name")
            if (first == None):
                print(file + " had no first name")
            if (date == None):
                print(file + " had no date")
            if (time == None):
                print(file + " had no time")
            continue
        print(last + ", " + first + ": " + date + " " + time)
        old_file_name = file
        
        ID_Number = last.rstrip() + '-' + first.rstrip() + '-' + date
                                                                       # This will take the value of our old ID number.
        
        appendix = 1                                                   # Reset the appendix to 1 on each loop
        for ID in ID_List:                                             # For each ID number we've memoized in our list of file names
            if appendix == 1:                                          # If this is our first time potentially matching something, no appendix to the filename
                if ID == str(ID_Number):                               # If we have a match in here, we need to increase the appendix.
                    appendix += 1
            else:                                                      # If this is any other time we need to add an appendix
                if ID == (str(ID_Number) + '_' + str(appendix)):       # If we have a match here, we still need to increase the appendix because we had another match.
                    appendix += 1
        if (appendix > 1):
            ID_Number = str(ID_Number) + '_' + str(appendix)           # Change the ID_Number to reflect it's new name so it's not a duplicate
        else:
            ID_Number = str(ID_Number)
        ID_List.append(ID_Number)                                      # Now we know what appendix to use for the file, time to add it to the list
        
        new_file_name = str(ID_Number) + ".rtf"
        os.rename(old_file_name, new_file_name)

#Chthonic
def parseFile(file):
       last = None
       first = None
       date = None
       time = None
       for line in file.readlines():
          if (first == None):
             last, first = parseLine(line)
          else:
             #Now we have our name, time to continue to find our date
             date, time = parseUnbracketedPhrase(line)
             if (date != None or time != None):
                break
       
       return last, first, date, time

#Chthonic
def parseLine(line):
       first = None
       last = None
       for phrase in line.split('{'):
          last, first = parseBracketedPhrase(phrase)      
          if (first != None or last != None):
             break
       return last, first

#Chthonic
def parseBracketedPhrase(phrase):
       id = None
       dash = None
       first = None
       last = None
       found = None
       previous = None
       for phrase in phrase.split(' '):
          if (id != None and first == None):
             first = phrase
             continue
          if (dash != None and id == None):
             id = phrase
             continue
          if (found != None and dash == None):
             dash = phrase
             continue
          if (found == None):
             found = parseSpacePhrase(phrase)
             continue
          if (first != None and checkName(phrase)):           # We're letting the loop finish. The last valid name on the line is the last name.
             if('\\' in phrase):
                last = phrase.rstrip().split('\\')[0]         # We are going to grab everything before the \ character here.
             else:
                last = phrase
       
       return last, first

def checkName(phrase):
       for part in phrase.rstrip().rstrip("\\par").replace('\'', '-').split('-'):
          if (not part.isalpha() and not (part == '')):
             if ("St." in part):
                if (not part.replace('St.','').isalpha()):
                   return False
             else:
                return False
       if (len(phrase) < 2):
          return False
       phrase = phrase.lower()
       vowels = phrase.count("a") + phrase.count("e") + phrase.count("i") + phrase.count("o") + phrase.count("u") + phrase.count("y")
       if (vowels == 0):
          return False
       return True

#Chthonic
def parseSpacePhrase(phrase):
       # print(phrase) # test for detection
       if (phrase == "Patient:\\tab"):
          return True
       return None

def parseUnbracketedPhrase(phrase):
       tab = None
       date = None
       time = None
       foundOne = None
       foundTwo = None
       for part in phrase.rstrip().split(' '):
          if (date != None):
             time = part
             break
          if ((tab != None or foundTwo != None) and date == None):
             date = ""
             for piece in part.split('/'):
                date = date + piece
             continue
          if (foundOne != None and tab == None):
             tab = part                          #Why is there an extra tab in there to gunk things up??
             continue
          if (foundOne == None):
             foundOne = parseTimePhraseOne(part)
          if (foundTwo == None):
             foundTwo = parseTimePhraseTwo(part)
       
       return date, time

def parseTimePhraseOne(phrase):
       
       if (phrase == "Date:\\tab"):
          return True
       return None

def parseTimePhraseTwo(phrase):

       if (phrase == "Date:\\tab\\tab"):
          return True
       return None

main()
